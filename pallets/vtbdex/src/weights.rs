
//! Autogenerated weights for `pallet_vtbdex`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-02, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/vtb-node
// benchmark
// pallet
// --pallet
// pallet_vtbdex
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=pallets/vtbdex/src/weights1.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;


pub trait WeightInfo {
	fn buy_vtbc() -> Weight;
	fn cancel_buy_vtbc_order() -> Weight;
	fn sell_vtbc() -> Weight;
	fn cancel_sell_vtbc_order() -> Weight;
	fn withdraw_initiate() -> Weight;
	fn withdraw_inprogress() -> Weight;
	fn withdraw_failed() -> Weight;
	fn withdraw_failed_due_to_time_out() -> Weight;
	fn check_and_remove_from_pending_list() -> Weight;
	fn check_and_return_withdraw_pending_amount() -> Weight;
	fn initialize_values_for_apr() -> Weight;
	fn initialize_value_for_year_ta() -> Weight;
	fn submit_vtbc_hourly_rate() -> Weight;
	fn set_vtbdex_fee_collector_account() -> Weight;
	fn set_vtbdex_transaction_fee() -> Weight;
	fn stop_vtbdex_functionality() -> Weight;
	fn resume_vtbdex_functionality() -> Weight;
	fn submit_new_estimated_price() -> Weight;
	fn charge_set_ipfs_trnx_price() -> Weight;
	fn initiate_convert_vtbc_to_vtbt_substrate() -> Weight;
	fn initiate_convert_vtbt_to_vtbc_substrate() -> Weight;
	fn initiate_transfer_of_vtbt_substrate() -> Weight;
	fn initiate_transfer_from_of_vtbt_substrate() -> Weight;
	fn claim_distribution() -> Weight;
	fn claim_all_distribution() -> Weight;
	fn check_claim_distribution() -> Weight;
}

/// Weight functions for `pallet_vtbdex`.
// pub struct WeightInfo<T>(PhantomData<T>);
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:3 w:3)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:0)
	// Storage: UsdRate UsdRate (r:1 w:1)
	// Storage: VtbDex TotalSellsJournal (r:1 w:0)
	// Storage: VtbcToken ReserveBalance (r:1 w:1)
	// Storage: VtbDex OrderIndexedNMap (r:1 w:0)
	// Storage: VtbDex OrderBookNMap (r:3 w:0)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:6 w:6)
	// Storage: VtbDex Globals (r:1 w:1)
	// Storage: VtbDex Circulation (r:2 w:2)
	// Storage: VtbDex Distribution (r:1 w:1)
	// Storage: VtbDex TxnAffectedVtbcPrice (r:1 w:1)
	fn buy_vtbc() -> Weight {
		(370_768_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(24 as Weight))
			.saturating_add(T::DbWeight::get().writes(16 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:2 w:2)
	// Storage: VtbDex User (r:2 w:2)
	// Storage: VtbDex OrderBookNMap (r:1 w:1)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:0)
	// Storage: UsdRate UsdRate (r:1 w:0)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex Globals (r:1 w:1)
	fn cancel_buy_vtbc_order() -> Weight {
		(131_127_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:2 w:2)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:0)
	// Storage: UsdRate UsdRate (r:1 w:0)
	// Storage: VtbDex OrderIndexedNMap (r:2 w:1)
	// Storage: VtbDex User (r:3 w:3)
	// Storage: VtbDex TotalSellsJournal (r:1 w:1)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex Globals (r:1 w:1)
	// Storage: VtbDex Circulation (r:1 w:1)
	// Storage: VtbDex OrderBookNMap (r:0 w:1)
	fn sell_vtbc() -> Weight {
		(154_062_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:2 w:2)
	// Storage: VtbDex User (r:3 w:3)
	// Storage: VtbDex OrderBookNMap (r:1 w:1)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:0)
	// Storage: UsdRate UsdRate (r:1 w:0)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex Globals (r:1 w:1)
	// Storage: VtbDex Circulation (r:1 w:1)
	fn cancel_sell_vtbc_order() -> Weight {
		(137_915_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:0)
	// Storage: UsdRate UsdRate (r:1 w:0)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:2 w:2)
	// Storage: VtbDex Circulation (r:1 w:1)
	// Storage: VtbDex BlockedUserWallet (r:1 w:1)
	// Storage: VtbDex WithdrawCountRecord (r:1 w:1)
	fn withdraw_initiate() -> Weight {
		(108_797_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: VtbDex BlockedUserWallet (r:1 w:1)
	fn withdraw_inprogress() -> Weight {
		(18_653_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtbDex BlockedUserWallet (r:1 w:1)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex Wallet (r:1 w:1)
	// Storage: VtbDex User (r:1 w:1)
	// Storage: VtbDex Circulation (r:1 w:1)
	fn withdraw_failed() -> Weight {
		(50_478_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: VtbDex BlockedUserWallet (r:1 w:1)
	fn withdraw_failed_due_to_time_out() -> Weight {
		(27_553_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:1 w:0)
	// Storage: VtbDex BlockedUserWallet (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn check_and_remove_from_pending_list() -> Weight {
		(34_327_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: VtbDex BlockedUserWallet (r:1 w:1)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:1 w:1)
	// Storage: VtbDex Circulation (r:1 w:1)
	fn check_and_return_withdraw_pending_amount() -> Weight {
		(55_355_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: VtbDex AprEstimate (r:1 w:1)
	// Storage: VtbDex Globals (r:1 w:1)
	// Storage: UsdRate UsdRate (r:1 w:1)
	// Storage: VtbDex UpdatedTimeList (r:1 w:1)
	// Storage: VtbDex VtbcStartRate (r:0 w:1)
	// Storage: VtbDex UsdVtbcH (r:0 w:1)
	fn initialize_values_for_apr() -> Weight {
		(14_515_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: VtbDex Globals (r:1 w:0)
	// Storage: VtbDex AprEstimate (r:1 w:1)
	// Storage: UsdRate UsdRate (r:1 w:1)
	// Storage: VtbDex UsdVtbcH (r:0 w:1)
	fn initialize_value_for_year_ta() -> Weight {
		(9_939_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: VtbDex UpdatedTimeList (r:1 w:1)
	// Storage: UsdRate UsdRate (r:1 w:1)
	// Storage: VtbDex Globals (r:1 w:1)
	// Storage: VtbDex AprEstimate (r:2 w:2)
	// Storage: VtbDex TxnAffectedVtbcPrice (r:0 w:1)
	// Storage: VtbDex UsdVtbcH (r:0 w:1)
	fn submit_vtbc_hourly_rate() -> Weight {
		(42_748_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: VtbDex Wallet (r:1 w:0)
	// Storage: VtbTErc20 InitVtbtErc20Token (r:1 w:1)
	// Storage: VtbDex VtbdexTransactionFee (r:0 w:1)
	// Storage: VtbDex VtbSystemRunning (r:0 w:1)
	// Storage: VtbTErc20 Asset (r:0 w:1)
	fn set_vtbdex_fee_collector_account() -> Weight {
		(24_985_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:1)
	fn set_vtbdex_transaction_fee() -> Weight {
		(17_832_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:1)
	fn stop_vtbdex_functionality() -> Weight {
		(13_139_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:1)
	fn resume_vtbdex_functionality() -> Weight {
		(14_225_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtbDex EstimatedGasPrice (r:0 w:1)
	fn submit_new_estimated_price() -> Weight {
		(10_650_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex Wallet (r:1 w:1)
	// Storage: VtbDex User (r:1 w:1)
	fn charge_set_ipfs_trnx_price() -> Weight {
		(31_330_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:2 w:2)
	// Storage: UsdRate UsdRate (r:1 w:0)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:0)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:4 w:4)
	// Storage: VtbTErc20 Asset (r:1 w:1)
	// Storage: VtbTErc20 BalanceOf (r:1 w:1)
	// Storage: VtbDex Globals (r:1 w:1)
	// Storage: VtbDex Circulation (r:1 w:1)
	fn initiate_convert_vtbc_to_vtbt_substrate() -> Weight {
		(123_816_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:2 w:2)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:0)
	// Storage: UsdRate UsdRate (r:1 w:0)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:4 w:4)
	// Storage: VtbTErc20 Asset (r:1 w:1)
	// Storage: VtbTErc20 BalanceOf (r:1 w:1)
	// Storage: VtbDex Globals (r:1 w:1)
	// Storage: VtbDex Circulation (r:1 w:1)
	fn initiate_convert_vtbt_to_vtbc_substrate() -> Weight {
		(126_565_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:3 w:3)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:0)
	// Storage: UsdRate UsdRate (r:1 w:0)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:4 w:4)
	// Storage: VtbTErc20 BalanceOf (r:2 w:2)
	fn initiate_transfer_of_vtbt_substrate() -> Weight {
		(126_152_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:4 w:4)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:0)
	// Storage: UsdRate UsdRate (r:1 w:0)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:4 w:4)
	// Storage: VtbTErc20 Allowance (r:1 w:1)
	// Storage: VtbTErc20 BalanceOf (r:2 w:2)
	fn initiate_transfer_from_of_vtbt_substrate() -> Weight {
		(148_856_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(15 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:2 w:2)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:0)
	// Storage: UsdRate UsdRate (r:1 w:0)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:8 w:8)
	// Storage: VtbDex Distribution (r:1 w:1)
	// Storage: VtbDex Claim (r:1 w:1)
	// Storage: VtbDex Circulation (r:1 w:1)
	fn claim_distribution() -> Weight {
		(190_258_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(17 as Weight))
			.saturating_add(T::DbWeight::get().writes(13 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Wallet (r:2 w:2)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:8 w:8)
	// Storage: VtbDex Distribution (r:1 w:1)
	// Storage: VtbDex Claim (r:3 w:3)
	// Storage: VtbDex VtbdexTransactionFee (r:1 w:0)
	// Storage: UsdRate UsdRate (r:1 w:0)
	// Storage: VtbDex Circulation (r:3 w:3)
	fn claim_all_distribution() -> Weight {
		(372_538_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(21 as Weight))
			.saturating_add(T::DbWeight::get().writes(17 as Weight))
	}
	// Storage: VtbDex VtbSystemRunning (r:1 w:0)
	// Storage: VtbDex Distribution (r:1 w:0)
	// Storage: VtbDex Wallet (r:1 w:1)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:4 w:4)
	// Storage: VtbDex Claim (r:3 w:3)
	fn check_claim_distribution() -> Weight {
		(112_152_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
}
