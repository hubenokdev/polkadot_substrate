
//! Autogenerated weights for `pallet_cross_chain`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-02, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/vtb-node
// benchmark
// pallet
// --pallet
// pallet_cross_chain
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=pallets/crosschain-actions/src/weights1.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn submit_signed_user_new_wallet_record() -> Weight;
	fn submit_signed_user_wallet_add_new_crypto() -> Weight;
	fn crypto_deposit_success() -> Weight;
	fn crypto_withdraw_success() -> Weight;
}

/// Weight functions for `pallet_cross_chain`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: VtbDex Wallet (r:1 w:1)
	// Storage: CrossChainActions TransactionHashList (r:1 w:1)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:4 w:3)
	// Storage: VtbDex Claim (r:3 w:3)
	fn submit_signed_user_new_wallet_record() -> Weight {
		(74_871_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: VtbDex Wallet (r:1 w:1)
	// Storage: CrossChainActions TransactionHashList (r:1 w:1)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:4 w:0)
	fn submit_signed_user_wallet_add_new_crypto() -> Weight {
		(67_967_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: VtbDex Wallet (r:1 w:1)
	// Storage: CrossChainActions TransactionHashList (r:1 w:1)
	// Storage: VtbDex Period (r:1 w:0)
	// Storage: VtbDex User (r:1 w:1)
	// Storage: VtbDex Circulation (r:1 w:1)
	fn crypto_deposit_success() -> Weight {
		(58_152_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: VtbDex Wallet (r:1 w:0)
	// Storage: CrossChainActions TransactionHashList (r:1 w:1)
	// Storage: VtbDex BlockedUserWallet (r:1 w:1)
	fn crypto_withdraw_success() -> Weight {
		(31_401_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}
